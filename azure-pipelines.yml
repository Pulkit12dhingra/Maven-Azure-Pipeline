# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
# ctrl + k+ C to comment
# ctrl +k +U to uncomment
trigger:
- java

pool: 
 name: test
 demands:
 - agent.name -equals CentOS
 
steps:
 - task: SonarCloudPrepare@1
   inputs:
     SonarCloud: 'SonarCloud'
     organization: 'pulkitdhingra01'
     scannerMode: 'Other'


- task: Maven@3
  inputs:
    mavenPomFile: 'java_test_1/java_test_1/pom.xml'
    goals: 'clean install'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    javaHomeOption: 'JDKVersion'
    mavenVersionOption: 'Default'
    mavenAuthenticateFeed: false
    effectivePomSkip: false
    sonarQubeRunAnalysis: true
    sqMavenPluginVersionChoice: 'latest'


 - task: SonarCloudPublish@1
   inputs:
     pollingTimeoutSec: '300'

 - task: CopyFiles@2
   inputs:
     SourceFolder: '$(system.defaultworkingdirectory)'
     Contents: '**/*.jar'
     TargetFolder: '$(build.artifactstagingdirectory)'
     OverWrite: true


 - task: PublishBuildArtifacts@1
   inputs:
     PathtoPublish: '$(Build.ArtifactStagingDirectory)'
     ArtifactName: 'drop 3'
     publishLocation: 'Container'

 - task: ArtifactoryGenericUpload@2
   inputs:
     artifactoryService: 'artifactory'
     specSource: 'taskConfiguration'
     fileSpec: |
       {
         "files": [
           {
             "pattern": "*.war",
             "target": "libs-release-local"
           }
         ]
       }
     failNoOp: false

- task: Docker@2
  displayName: build
  inputs:
    containerRegistry: DockerHub
    repository: 'java_test'
    command: build
    Dockerfile: 'java_test_1/java_test_1/Dockerfile'
